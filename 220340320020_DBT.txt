-- 3.	Display all the employees where SAL between 2500 and 5000 (inclusive of both).
select * from EMP
where SAL between 2500 and 5000;

-- 4.	Display all the ENAMEs in descending order of ENAME.
select ENAME from EMP 
order by ENAME desc;

-- 5.	Display all the JOBs in lowercase.
select lower(job) from EMP ;

-- 6.	Display the ENAMEs and the lengths of the ENAMEs.
select ENAME,length(ENAME) from EMP ;


-- 7.	Display the DEPTNO and the count of employees who belong to that DEPTNO .
select DEPTNO, count(ENAME) from EMP
group by DEPTNO;    

-- 8.	Display the DNAMEs and the ENAMEs who belong to that DNAME.
		
        select DNAME , ENAME from EMP, DEPT 
        where DEPT.DEPTNO = EMP.DEPTNO;
        
-- 9.	Display the position at which the string ‘AR’ occurs in the ename.
  select ENAME from EMP
  where ENAME like '%AR%';
  
-- 10.	Display the HRA for each employee given that HRA is 20% of SAL.
select ENAME ,SAL ,(SAL*0.2) 'HRA' from EMP;

*****************************************************************************************************


/*1.	Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters. Your procedure should then determine
 if the first varchar string exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = ‘CDAC, then string1 exists inside string2. 
 The stored procedure should insert the appropriate message into a suitable TEMPP output table. 
 Calling program for the stored procedure need not be written.*/


create table TEMPP
(str1 varchar(10),
str2 varchar(10),
result varchar(15));
desc tempp;

delimiter //
create procedure PROC1(s1 varchar(10),s2 varchar(10))
begin
		if (instr(s1,s2)>0 or instr(s2,s1)>0) then 
				insert into TEMPP values(s1,s2,"String Exists");
		else
				insert into TEMPP values(s1,s2,"String not Exists");
		end if;
        end; //
        delimiter ;
        
        call PROC1('DAC','CDAC');
        SELECT * FROM TEMPP;
****************************************************************************************************************

        
/*2.	Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle. 
The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise.
 A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. 
 Check if the dimensions entered can form a valid triangle.
 Calling program for the stored function need not be written.
*/

create table tempp2(
a int,
b int,
c int,
result varchar(50)
);
desc tempp2;
drop table tempp2;

-- Function

delimiter //
create function FUNC1(a int , b int , c int)
returns boolean
deterministic
begin
	
    if a+b>c and b+c>a and c+a>b then
		return true;
	else 
		return false;
    end if;
  end; //
  delimiter ;

--   procedure


delimiter //
create procedure triangle(x int, y int ,z int)
begin

declare T int;
set T= FUNC1(x,y,z);
if T then 
	insert into tempp2 values(x,y,z,"VALID TRIANGLE");
		else
        	insert into tempp2 values(x,y,z,"INVALID TRIANGLE");
        end if;
        
    end; //
    delimiter ;
    
    drop procedure triangle;
    call triangle(1,1,1);
    call triangle(2,5,1);
    select * from tempp2;